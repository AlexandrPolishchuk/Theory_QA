•	Что подразумевается под тестовой средой?

Тестовая среда -это отдельное окружение, где можно спокойно проверять доработанный или вновь созданный функционал, и не боятся что ошибки попадут к конечному пользователю. Тестовая среда зачастую считается банальной копией рабочего окружения, которая не видна конечному пользователю, но максимально похожа на конечную версию продукта. 

•	В чем отличие build от release?

Билд — это в буквальном переводе — "сборка". Т.е. мы берём срез исходников, создаём исполняемые файлы, конфиги, скрипты SQL и т.п. Т.е. билд — полученные из исходников рабочие продукты. Создаётся как вручную по требованию, так и автоматическими системами сборок по расписанию. Как угодно, в общем — было бы что собирать.
Релиз — это билд, который команда разработчиков предоставляет во внешнюю среду. В качестве потребителя релиза может быть, как команда тестеров, так и пользователи. Соответственно, внутренний релиз — это тестовый релиз, который должна тестировать группа тестирования, внешний релиз — это релиз, который поставляются заказчику.

•	Основные фазы тестирования?

Необходимость проведения тестирования в несколько этапов определяется тем, что разные типы ошибок проще всего обнаруживаются на разных этапах. Основными фазами тестирования являются:


– модульное тестирование;
– интеграционное тестирование;
– системное тестирование (в том числе адаптационное, функциональное и нагрузочное);
– регрессионное тестирование;
– приемочное тестирование.
На стадии модульного тестирования достаточно просто выявляются просчеты в логике построения модуля и/или реализации алгоритмов, ошибки, связанные с неправильным использованием локальных ресурсов, а также ошибки в локальных переменных.


Следующим этапом является интеграционное тестирование. Оно проходит в несколько стадий и заключается в тестировании частей системы, состоящих из двух и большего количества модулей. На стадии интеграционного тестирования ошибки управления потоком, ошибки в передаче и/или интерпретации данных, использовании ресурсов, средств коммуникации.


Третьим этапом является системное тестирование, которое существенным образом отличается от модульного и интеграционного. Оно рассматривает систему как черный ящик и работает исключительно с пользовательскими интерфейсами. Основной целью системного тестирования является проверка стабильности и корректности работы системы, а также соответствия функциональности системы спецификациям, указанным в сопроводительных документах, проверяется работы системы на базе различных операционных систем и аппаратного обеспечения. Исследуется производительность тестируемого программного обеспечения.


Основной целью регрессионного тестирования является проверка того, что в результате внесения изменений в программный код зафиксированные ранее ошибки исправлены, а новые не появляются. Для регрессионного тестирования используется специально разработанный набор тестов, из которого каждый раз выбираются те тесты, которые позволяют обнаружить появление новых ошибок с наибольшей вероятностью.


Приемочное тестирование — тестирование интегральной функциональности системы на соответствие требованиям заказчика. Планируется с участием представителей заказчика. Проводится на заключительном этапе с целью удостовериться в том, что система работает так, как и ожидалось, все необходимые формы, процедуры присутствуют и функционируют нормально. Данное тестирование является высокоуровневой проверкой отсутствия пробелов в функциональности системы.


Положительные результаты бизнес-тестирования означают, что все компоненты системы работоспособны и включены в данную версию продукта.

•	Что такое импакт анализ?

Impact Analysis (импакт анализ) - это исследование, которое позволяет указать затронутые места (affected areas) в проекте при разработке новой или изменении старой функциональности, а также определить, насколько значительно они были затронуты. Затронутые области требуют большего внимания во время проведения регрессионного тестирования. Импакт анализ может быть полезным в следующих случаях:
 -есть изменения в требованиях;
 -получен запрос на внесение изменений в продукт;
 -ожидается внедрение нового модуля или функциональности в существующий продукт;
 -каждый раз, когда есть изменения в существующих модулях или функциональностях продукта.

•	Критерии выбора тестов?
•	Принципы тестирования?
•	Что такое независимое тестирование?
•	Что такое тестирование со сдвигом влево?
•	Почему тестирование делится на отдельные этапы?
•	Какие есть этапы тестирования?
•	Как вы тестируете продукт, если требования еще не зафиксированы?
•	Как вы узнаете, было ли создано достаточно тестов для тестирования продукта?
•	Что подразумевается под тестовыми данными?

        Под тестовыми данными подразумевается набор некоторых входных значений, которые
 требуются при выполнении тест-кейсов. Эти данные определяются тестировщиками в соответствии
 с требованиями, которые предъявляются к продукту. В каких-то случаях используются специальные
 инструменты генерации, а в каких-то – это делается вручную.           

•	Что такое бета-тестирование?
•	Что означает пилотное тестирование? (Pilot)
•	Что такое бизнес – логика?
•	Какие существуют основные виды тестирования ПО?

Виды тестирования ПО: 

Функциональные виды тестирования:
1)	Functional testing (Функциональное тестирование)
2)	Interoperability testing (Тестирование взаимодействия)
3)	Security and Access Control testing (Тестирование безопасности)

Нефункциональные виды тестирования:
1.	Usability testing (Тестирование удобства пользования, UI/UX)
2.	Все виды тестирования производительности
- stress testing (Стрессовое тестирование)
- load testing (Нагрузочное тестирование)
- volume testing (Объемное тестирование)
- stability/reliability testing (Тестирование стабильности или надежности)
3. Installation testing (Тестирование установки)
4. GUI testing (Тестирование графического интерфейса)
5. Failover and recovery testing (Тестирование на отказ и восстановление)
6. Internationalization testing (Тестирование интернационализации)
7. Localization testing (Тестирование локализации)
8. Configuration testing (Конфигурационное тестирование)

 Связанные с изменениями виды тестирования:
1)	Regression testing (Регрессионное тестирование)
2)	Retest (bug verified fixed)
3)	Smoke test 
4)	Sanity check
5)	Build verification test (Тестирование сборки)

•	Методы тестирования?
•	Что такое пирамида / уровни тестирования?
•	Что такое деструктивное/разрушающее/негативное тестирование? (DT — Destructive testing)
•	Что такое недеструктивное/неразрушающее/позитивное тестирование? (NDT – Non Destructive testing)
•	Что подразумевается под компонентным/модульным/юнит тестированием? (Component/Module/Unit testing)
•	Что подразумевается под интеграционным тестированием?
•	Разница между Unit testing и Integration testing?
•	Что такое системное интеграционное тестирование? (SIT — System Integration testing) 
•	В чем разница между тест-драйвером и тест-заглушкой? (Test Driver and Test Stub)
•	Что подразумевается под системным тестированием?
•	Что такое функциональное тестирование?
•	Что такое тестирование совместимости/взаимодействия? (Compatibility/Interoperability testing)
•	Что такое тестирование на соответствие? (Conformance/Compilance testing)
•	Что такое нефункциональное тестирование?
•	Что вы знаете о Тестировании удобства пользования?

Тестирование удобства пользования - это метод тестирования, направленный на установление степени удобства использования, обучаемости, понятности и привлекательности для пользователей разрабатываемого продукта в контексте заданных условий. [ISO 9126]
Тестирование удобства пользования дает оценку уровня удобства использования приложения по следующим пунктам:
•	производительность, эффективность (efficiency) - сколько времени и шагов понадобится пользователю для завершения основных задач приложения, например, размещение новости, регистрации, покупка и т.д.? (меньше - лучше)
•	правильность (accuracy) - сколько ошибок сделал пользователь во время работы с приложением? (меньше - лучше)
•	активизация в памяти (recall) – как много пользователь помнит о работе приложения после приостановки работы с ним на длительный период времени? (повторное выполнение операций после перерыва должно проходить быстрее чем у нового пользователя)
•	эмоциональная реакция (emotional response) – как пользователь себя чувствует после завершения задачи - растерян, испытал стресс? Порекомендует ли пользователь систему своим друзьям? (положительная реакция - лучше)

•	Отличия тестирование на удобство пользования и тестирования доступности? (Usability Vs. Accessibility testing)
•	Что такое тестирование интерфейса?
•	Что такое тестирование рабочего процесса/воркфлоу? (Workflow testing)
•	Что вы знаете о пользовательском приемочном тестировании? (UAT – User Acceptance testing)
•	Что такое эксплуатационное приемочное тестирование? (OAT — Operational Acceptance testing)
•	Что такое инсталляционное тестирование?
•	Что вы знаете о тестировании безопасности?
•	Что такое конфигурационное тестирование?
•	Объясните, что такое тестирование N+1
•	Что вы знаете о тестировании сборки? (Build Verification Test)
•	Что такое тестирование потоков? (Thread testing)
•	Что вы знаете о мутационном тестировании? (Mutation testing)
•	Что вы знаете о мутационном тестировании? (Mutation testing)

Mutation testing - это тип тестирования программного обеспечения, в котором мы меняем определенные выражения в исходном коде и проверяем, способны ли наши тест кейсы найти ошибки. Это тип тестирования относится к тестированию белого ящика, который в основном используется для модульного тестирования. Изменения в мутантной программе сохраняются довольно небольшими, поэтому это не влияет на общую цель программы. Цель мутационного тестирования - оценить качество тест кейсов, которые должны быть достаточно надежными, чтобы не выполнять этот мутантный код. Этот метод также называется стратегией тестирования, основанной на ошибках, так как он включает в себя создание ошибки в программе. 

•	Шаг 1: Ошибки вводятся в исходный код программы путем создания множества версий, которые называются мутантами. Каждый мутант должен содержать только одну ошибку, и цель состоит в том, чтобы заставить версию мутанта потерпеть неудачу, что демонстрирует эффективность тест кейса. 
•	Шаг 2: Тест кейсы применяются к исходной программе, а также к программе мутанта. 
•	Шаг 3: Происходит сравнение результатов оригинальной и мутантной программ. 
•	Шаг 4: Если исходная программа и программы-мутанты генерируют разные выходные данные, то этот мутант уничтожается тест кейсом. Таким образом, тест кейс достаточно хорош, чтобы обнаружить изменение между оригинальной и мутантной программами. 
•	Шаг 5: Если исходная программа и программа-мутант генерируют одинаковые выходные данные, мутант остается в живых. В таких случаях необходимо создать более эффективные тест кейсы, которые будут убивать всех мутантов.

•	В чем разница между Baseline и Benchmark testing?
•	Что такое A/B тестирование?
•	Что означает сквозное тестирование? (E2E — End–to–End)
•	В чем разница между E2E и системным тестированием?
•	Что такое параллельное тестирование? (Parallel testing)
•	Чем AdHock тестирование отличается от Исследовательского тестирования?


